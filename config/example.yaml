#example configuration file - follow this structure to define a classification run

#arguments definitions
######################
#load_model: boolean, should an SVM model be loaded (otherwise needs to be trained)
#class_weight: dict, what weights are to be applied to each of the two classes
#classical: boolean, is kernel estimated classically
#if classical: True, ignored otherwise:
#    gamma: float, gamma parameter of the rbf kernel (if classical: True)
#    C_class: float, C parameter for classical kernel
#if classical: False, ignored otherwise:
#    alpha: float, alpha parameter for quantum kernel
#    C_quant: float, C parameter for quantum kernel
#    single_mapping: int, which mapping to choose for single qubit operations
#        check ../quantum_circuit/param_U_gate.py for options
#    pair_mapping: int, which mapping to choose for two-qubit operations
#        check ../quantum_circuit/param_U_gate.py for options
#    interaction: str, what two-qubit gate to use
#        check ../quantum_circuit/param_U_gate.py for options
#trainPlusTestSize: the size of dataset which will be split into train and test sets.
#testSetSize: in (0,1) interval; fraction of dataset used as test set.
######################

C_class: 1000000.0
C_quant: 500
alpha: 0.05
circuit_width: 7
class_weight: balanced
classical: false
data_map_func: null
fold_idx: 0
gamma: auto
interaction:
- Z
- YZ
load_model: false
modelSavedPath: trainedModels/
n_splits: 5
resultOutputPath: output/
trainPlusTestSize: 1250

